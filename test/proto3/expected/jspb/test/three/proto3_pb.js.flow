// @flow
// GENERATED CODE -- DO NOT EDIT!

import * as jspbTestTwoProto2 from "../../../jspb/test/two/proto2_pb.js";
import type {ForeignMessageObj} from "../../../jspb/test/two/proto2_pb.js";
import * as jspbTestThreeProto3Supplemental from "../../../jspb/test/three/proto3_supplemental_pb.js";
import type {SublingMessageObj} from "../../../jspb/test/three/proto3_supplemental_pb.js";

declare export class TestProtoPackageSubling {
  getSibling(): ?jspbTestThreeProto3Supplemental.SublingMessage;
  setSibling(val: ?jspbTestThreeProto3Supplemental.SublingMessage): void;
  toObject(opt_includeInstance: ?boolean): TestProtoPackageSublingObj;
  serializeBinary(): Uint8Array;
  serializeBinaryToWriter(writer: any): void;
  cloneMessage(): TestProtoPackageSubling;
  static deserializeBinary(bytes: any): TestProtoPackageSubling;
  static deserializeBinaryFromReader(msg: TestProtoPackageSubling, reader: any): TestProtoPackageSubling;
  static serializeBinaryToWriter(message: TestProtoPackageSubling, writer: any): void;
  static toObject(includeInstance: boolean|typeof undefined, msg: TestProtoPackageSubling): TestProtoPackageSublingObj;
}

export type TestProtoPackageSublingObj = {
  sibling: ?SublingMessageObj
}

declare export class TestProto3 {
  getOptionalInt32(): number;
  setOptionalInt32(val: number): void;
  getOptionalInt64(): number;
  setOptionalInt64(val: number): void;
  getOptionalUint32(): number;
  setOptionalUint32(val: number): void;
  getOptionalUint64(): number;
  setOptionalUint64(val: number): void;
  getOptionalSint32(): number;
  setOptionalSint32(val: number): void;
  getOptionalSint64(): number;
  setOptionalSint64(val: number): void;
  getOptionalFixed32(): number;
  setOptionalFixed32(val: number): void;
  getOptionalFixed64(): number;
  setOptionalFixed64(val: number): void;
  getOptionalSfixed32(): number;
  setOptionalSfixed32(val: number): void;
  getOptionalSfixed64(): number;
  setOptionalSfixed64(val: number): void;
  getOptionalFloat(): number;
  setOptionalFloat(val: number): void;
  getOptionalDouble(): number;
  setOptionalDouble(val: number): void;
  getOptionalBool(): boolean;
  setOptionalBool(val: boolean): void;
  getOptionalString(): string;
  setOptionalString(val: string): void;
  getOptionalBytes(): string|Uint8Array;
  setOptionalBytes(val: string|Uint8Array): void;
  getOptionalForeignMessage(): ?jspbTestTwoProto2.ForeignMessage;
  setOptionalForeignMessage(val: ?jspbTestTwoProto2.ForeignMessage): void;
  getOptionalForeignEnum(): Proto3EnumType;
  setOptionalForeignEnum(val: Proto3EnumType): void;
  getOptionalNestedEnum(): TestProto3$NestedEnumType;
  setOptionalNestedEnum(val: TestProto3$NestedEnumType): void;
  getOptionalNestedMessage(): ?TestProto3$NestedMessage;
  setOptionalNestedMessage(val: ?TestProto3$NestedMessage): void;
  getRepeatedInt32List(): Array<number>;
  setRepeatedInt32List(val: Array<number>): void;
  getRepeatedInt64List(): Array<number>;
  setRepeatedInt64List(val: Array<number>): void;
  getRepeatedUint32List(): Array<number>;
  setRepeatedUint32List(val: Array<number>): void;
  getRepeatedUint64List(): Array<number>;
  setRepeatedUint64List(val: Array<number>): void;
  getRepeatedSint32List(): Array<number>;
  setRepeatedSint32List(val: Array<number>): void;
  getRepeatedSint64List(): Array<number>;
  setRepeatedSint64List(val: Array<number>): void;
  getRepeatedFixed32List(): Array<number>;
  setRepeatedFixed32List(val: Array<number>): void;
  getRepeatedFixed64List(): Array<number>;
  setRepeatedFixed64List(val: Array<number>): void;
  getRepeatedSfixed32List(): Array<number>;
  setRepeatedSfixed32List(val: Array<number>): void;
  getRepeatedSfixed64List(): Array<number>;
  setRepeatedSfixed64List(val: Array<number>): void;
  getRepeatedFloatList(): Array<number>;
  setRepeatedFloatList(val: Array<number>): void;
  getRepeatedDoubleList(): Array<number>;
  setRepeatedDoubleList(val: Array<number>): void;
  getRepeatedBoolList(): Array<boolean>;
  setRepeatedBoolList(val: Array<boolean>): void;
  getRepeatedStringList(): Array<string>;
  setRepeatedStringList(val: Array<string>): void;
  getRepeatedBytesList(): Array<string>|Array<Uint8Array>;
  setRepeatedBytesList(val: Array<string>|Array<Uint8Array>): void;
  getRepeatedForeignMessageList(): Array<jspbTestTwoProto2.ForeignMessage>;
  setRepeatedForeignMessageList(val: Array<jspbTestTwoProto2.ForeignMessage>): void;
  getRepeatedForeignEnumList(): Array<Proto3EnumType>;
  setRepeatedForeignEnumList(val: Array<Proto3EnumType>): void;
  getOptionalInt64String(): string;
  setOptionalInt64String(val: string): void;
  getOptionalUint64String(): string;
  setOptionalUint64String(val: string): void;
  getOptionalSint64String(): string;
  setOptionalSint64String(val: string): void;
  getOptionalFixed64String(): string;
  setOptionalFixed64String(val: string): void;
  getOptionalSfixedString(): string;
  setOptionalSfixedString(val: string): void;
  getOneofUint32(): number;
  setOneofUint32(val: number): void;
  getOneofForeignMessage(): ?jspbTestTwoProto2.ForeignMessage;
  setOneofForeignMessage(val: ?jspbTestTwoProto2.ForeignMessage): void;
  getOneofString(): string;
  setOneofString(val: string): void;
  getOneofBytes(): string|Uint8Array;
  setOneofBytes(val: string|Uint8Array): void;
  getMapStringToStringMap(): any;
  toObject(opt_includeInstance: ?boolean): TestProto3Obj;
  serializeBinary(): Uint8Array;
  serializeBinaryToWriter(writer: any): void;
  cloneMessage(): TestProto3;
  static deserializeBinary(bytes: any): TestProto3;
  static deserializeBinaryFromReader(msg: TestProto3, reader: any): TestProto3;
  static serializeBinaryToWriter(message: TestProto3, writer: any): void;
  static toObject(includeInstance: boolean|typeof undefined, msg: TestProto3): TestProto3Obj;
  static NestedMessage: typeof TestProto3$NestedMessage;
  static NestedEnum: TestProto3$NestedEnum;
}

type TestProto3$NestedEnum = {
  NESTED_FOO: 0,
  NESTED_BAR: 1,
  NESTED_BAZ: 2
}

export type TestProto3$NestedEnumType = 0 | 1 | 2;

export type TestProto3Obj = {
  optionalInt32: number,
  optionalInt64: number,
  optionalUint32: number,
  optionalUint64: number,
  optionalSint32: number,
  optionalSint64: number,
  optionalFixed32: number,
  optionalFixed64: number,
  optionalSfixed32: number,
  optionalSfixed64: number,
  optionalFloat: number,
  optionalDouble: number,
  optionalBool: boolean,
  optionalString: string,
  optionalBytes: string|Uint8Array,
  optionalForeignMessage: ?ForeignMessageObj,
  optionalForeignEnum: Proto3EnumType,
  optionalNestedEnum: TestProto3$NestedEnumType,
  optionalNestedMessage: ?TestProto3$NestedMessageObj,
  repeatedInt32List: Array<number>,
  repeatedInt64List: Array<number>,
  repeatedUint32List: Array<number>,
  repeatedUint64List: Array<number>,
  repeatedSint32List: Array<number>,
  repeatedSint64List: Array<number>,
  repeatedFixed32List: Array<number>,
  repeatedFixed64List: Array<number>,
  repeatedSfixed32List: Array<number>,
  repeatedSfixed64List: Array<number>,
  repeatedFloatList: Array<number>,
  repeatedDoubleList: Array<number>,
  repeatedBoolList: Array<boolean>,
  repeatedStringList: Array<string>,
  repeatedBytesList: Array<string>|Array<Uint8Array>,
  repeatedForeignMessageList: Array<ForeignMessageObj>,
  repeatedForeignEnumList: Array<Proto3EnumType>,
  optionalInt64String: string,
  optionalUint64String: string,
  optionalSint64String: string,
  optionalFixed64String: string,
  optionalSfixedString: string,
  oneofUint32: number,
  oneofForeignMessage: ?ForeignMessageObj,
  oneofString: string,
  oneofBytes: string|Uint8Array,
  mapStringToStringMap: Array<TestProto3$MapStringToStringEntryObj>
}

export type TestProto3$MapStringToStringEntryObj = {
  key: string,
  value: string
}

declare export class TestProto3$NestedMessage {
  getType(): TestProto3$NestedMessage$TypeType;
  setType(val: TestProto3$NestedMessage$TypeType): void;
  toObject(opt_includeInstance: ?boolean): TestProto3$NestedMessageObj;
  serializeBinary(): Uint8Array;
  serializeBinaryToWriter(writer: any): void;
  cloneMessage(): TestProto3$NestedMessage;
  static deserializeBinary(bytes: any): TestProto3$NestedMessage;
  static deserializeBinaryFromReader(msg: TestProto3$NestedMessage, reader: any): TestProto3$NestedMessage;
  static serializeBinaryToWriter(message: TestProto3$NestedMessage, writer: any): void;
  static toObject(includeInstance: boolean|typeof undefined, msg: TestProto3$NestedMessage): TestProto3$NestedMessageObj;
  static Type: TestProto3$NestedMessage$Type;
}

type TestProto3$NestedMessage$Type = {
  A: 0,
  B: 1
}

export type TestProto3$NestedMessage$TypeType = 0 | 1;

export type TestProto3$NestedMessageObj = {
  type: TestProto3$NestedMessage$TypeType
}

declare export var Proto3Enum: {
  PROTO3_FOO: 0,
  PROTO3_BAR: 1,
  PROTO3_BAZ: 2
}

export type Proto3EnumType = 0 | 1 | 2;

